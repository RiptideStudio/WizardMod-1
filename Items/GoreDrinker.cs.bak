using Microsoft.Xna.Framework;
using System.Collections.Generic;
using Terraria;
using Terraria.DataStructures;
using Terraria.ModLoader;
using Terraria.UI.Chat;
using WizardMod.World;

namespace WizardMod.Items;

public class GoreDrinker : ModItem
{
    public override void SetStaticDefaults()
    {
        DisplayName.SetDefault("Goredrinker");
        Tooltip.SetDefault("\nRight-click to shoot a bloody projectile that inflicts draining\nLeft-click to launch a bloody spine, which lifesteals against enemies inflicted with draining");
        Item.staff[Item.type] = true;
    }

    public override void SetDefaults()
    {
        Item.CloneDefaults(3870);
        Item.damage = 24;
        Item.DamageType = DamageClass.Magic;
        Item.mana = 10;
        Item.width = 16;
        Item.height = 32;
        Item.useTime = 14;
        Item.useAnimation = 14;
        Item.useStyle = 5;
        Item.knockBack = 2f;
        Item.value = 10000;
        Item.rare = 3;
        Item.noMelee = true;
        Item.autoReuse = true;
        Item.shoot = 1;
        Item.shootSpeed = 9f;
    }

    public override void ModifyTooltips(List<TooltipLine> tooltips)
    {
        Player player = Main.LocalPlayer;
        string sepText = "Bloody spine steals " + player.GetModPlayer<Global>().spellPower + " life";
        tooltips.Add(new TooltipLine(Mod, "name", sepText));
    }

    public override bool PreDrawTooltipLine(DrawableTooltipLine line, ref int yOffset)
    {
        if (!line.OneDropLogo)
        {
            Player player = Main.player[Main.myPlayer];
            float sepHeight = 0f;
            if (line.Name == "ItemName" && line.Mod == "Terraria")
            {
                float drawX = (float)line.X + line.Font.MeasureString(line.Text).X;
                float drawY = line.Y;
                new Color(100, 100, 255);
                ChatManager.DrawColorCodedStringWithShadow(baseColor: new Color(100, 255, 100), spriteBatch: Main.spriteBatch, font: line.Font, text: " (" + player.GetModPlayer<Global>().spellPower + " Spell power)", position: new Vector2(drawX, drawY), rotation: line.Rotation, origin: line.Origin, baseScale: line.BaseScale, maxWidth: line.MaxWidth, spread: line.Spread);
                yOffset = (int)sepHeight;
            }
            else
            {
                yOffset = 0;
            }
        }
        return true;
    }

    public override bool AltFunctionUse(Player player)
    {
        return true;
    }

    public override bool CanUseItem(Player player)
    {
        if (player.altFunctionUse == 2)
        {
            Item.knockBack = 2f;
            Item.shootSpeed = 10f;
            Item.mana = 5;
        }
        else
        {
            Item.knockBack = 3f;
            Item.shootSpeed = 9f;
            Item.mana = 10;
        }
        return base.CanUseItem(player);
    }

    public override void HoldItem(Player player)
    {
        player.itemLocation.Y = player.Center.Y;
        player.itemLocation.X = player.Center.X - (float)(4 * player.direction);
    }

    public override bool Shoot(Player player, EntitySource_ItemUse_WithAmmo source, Vector2 position, Vector2 velocity, int type, int damage, float knockback)
    {
        Vector2 pos = new Vector2(position.X - 4f, position.Y);
        Vector2 offset = Vector2.Normalize(velocity) * 15f;
        pos += offset;
        if (player.altFunctionUse == 2)
        {
            Projectile.NewProjectile((IEntitySource)source, pos, velocity, Mod.Find<ModProjectile>("LifestealProj").Type, damage / 2, knockback, player.whoAmI, 0f, 0f);
        }
        else
        {
            Projectile.NewProjectile((IEntitySource)source, pos, velocity, Mod.Find<ModProjectile>("BloodyProj").Type, damage, knockback, player.whoAmI, 0f, 0f);
        }
        return false;
    }

    public override void AddRecipes()
    {
        Recipe recipe = CreateRecipe();
        recipe.AddIngredient(1257, 12);
        recipe.AddIngredient(1329, 4);
        recipe.AddIngredient(null, "MagicSoul", 3);
        recipe.AddTile(null, "ArcaneTable");
        recipe.Register();
    }
}
